{"version":3,"file":"index.umd.js","sources":["../src/jwt/index.ts","../src/hooks/index.tsx"],"sourcesContent":["export function decodeToken(token: string) {\n  try {\n    // if the token has more or less than 3 parts or is not a string\n    // then is not a valid token\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    } else {\n      // payload ( index 1 ) has the data stored and\n      // data about the expiration time\n      const payload: string = token.split(\".\")[1];\n      // handle unicode parsing issues between atob and JWT base64 format\n      const base64: string = payload.replace(\"-\", \"+\").replace(\"_\", \"/\");\n      // decode and parse to json\n      const decoded = JSON.parse(atob(base64));\n      return decoded;\n    }\n  } catch (error) {\n    // Return null if something goes wrong\n    return null;\n  }\n}\n\nexport function isTokenExpired(token: string) {\n  const decodedToken: any = decodeToken(token);\n  let result: boolean = true;\n\n  if (decodedToken && decodedToken.exp) {\n    const expirationDate: Date = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp); // sets the expiration seconds\n    // compare the expiration time and the current time\n    result = expirationDate.valueOf() < new Date().valueOf();\n  } else {\n    result = true;\n  }\n\n  return result;\n}\n","import { useState, useEffect } from \"react\";\nimport { decodeToken, isTokenExpired } from \"../jwt\";\n\nexport function useJwt(token: string) {\n  const [isExpired, setIsExpired] = useState(false);\n  const [decodedToken, setDecodedToken] = useState<any>(null);\n\n  useEffect(() => {\n    setDecodedToken(decodeToken(token));\n    setIsExpired(isTokenExpired(token));\n  }, [token]);\n\n  return { isExpired, decodedToken };\n}\n"],"names":["decodeToken","token","split","length","base64","replace","JSON","parse","atob","error","isTokenExpired","decodedToken","result","exp","expirationDate","Date","setUTCSeconds","valueOf","useState","isExpired","setIsExpired","setDecodedToken","useEffect"],"mappings":"oOAAgBA,EAAYC,GAC1B,IAGE,GAAgC,IAA5BA,EAAMC,MAAM,KAAKC,QAAiC,iBAAVF,EAC1C,YAIA,IAEMG,EAFkBH,EAAMC,MAAM,KAAK,GAEVG,QAAQ,IAAK,KAAKA,QAAQ,IAAK,KAG9D,OADgBC,KAAKC,MAAMC,KAAKJ,IAGlC,MAAOK,GAEP,sBAIYC,EAAeT,GAC7B,IAAMU,EAAoBX,EAAYC,GAClCW,GAAkB,EAEtB,GAAID,GAAgBA,EAAaE,IAAK,CACpC,IAAMC,EAAuB,IAAIC,KAAK,GACtCD,EAAeE,cAAcL,EAAaE,KAE1CD,EAASE,EAAeG,WAAY,IAAIF,MAAOE,eAE/CL,GAAS,EAGX,OAAOA,kDChCcX,SACaiB,YAAS,GAApCC,OAAWC,SACsBF,WAAc,MAA/CP,OAAcU,OAOrB,OALAC,YAAU,WACRD,EAAgBrB,EAAYC,IAC5BmB,EAAaV,EAAeT,KAC3B,CAACA,IAEG,CAAEkB,UAAAA,EAAWR,aAAAA"}